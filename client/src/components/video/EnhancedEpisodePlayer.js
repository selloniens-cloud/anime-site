import React, { useState, useEffect, useCallback, useRef } from 'react';
import styled from 'styled-components';
import AniLibertyPlayer from './AniLibertyPlayer';
import SubtitleManager from './SubtitleManager';
import { LoadingSpinner } from '../../styles/GlobalStyles';
import anilibriaV2Service from '../../services/anilibriaV2Service';
import {
  saveVideoProgress,
  loadVideoProgress,
  getVideoSettings,
  saveVideoSettings,
} from '../../utils/videoProgress';

const PlayerContainer = styled.div`
  position: relative;
  width: 100%;
  height: 100%;
  background: #000;
  border-radius: 8px;
  overflow: hidden;
  min-height: 400px;

  @media (max-width: 768px) {
    min-height: 250px;
    border-radius: 0;
  }
`;

const OverlayControls = styled.div`
  position: absolute;
  top: 15px;
  right: 15px;
  z-index: 1000;
  display: flex;
  gap: 10px;
  align-items: center;
  opacity: ${props => props.visible ? 1 : 0};
  transition: opacity 0.3s ease;
`;

const ControlButton = styled.button`
  background: rgba(0, 0, 0, 0.8);
  border: 1px solid rgba(255, 255, 255, 0.3);
  color: white;
  padding: 8px 12px;
  border-radius: 6px;
  font-size: 12px;
  cursor: pointer;
  transition: all 0.2s ease;
  
  &:hover {
    background: rgba(0, 0, 0, 0.9);
    border-color: ${props => props.theme?.colors?.primary || '#FF6B6B'};
    transform: scale(1.05);
  }

  &:active {
    transform: scale(0.95);
  }
  
  &.active {
    background: ${props => props.theme?.colors?.primary || '#FF6B6B'};
    border-color: ${props => props.theme?.colors?.primary || '#FF6B6B'};
  }
`;

const EpisodeSelector = styled.select`
  background: rgba(0, 0, 0, 0.8);
  border: 1px solid rgba(255, 255, 255, 0.3);
  color: white;
  padding: 8px 12px;
  border-radius: 6px;
  font-size: 12px;
  cursor: pointer;
  min-width: 150px;
  
  &:hover {
    background: rgba(0, 0, 0, 0.9);
    border-color: ${props => props.theme?.colors?.primary || '#FF6B6B'};
  }
  
  &:focus {
    outline: none;
    border-color: ${props => props.theme?.colors?.primary || '#FF6B6B'};
  }
  
  option {
    background: #333;
    color: white;
    padding: 5px;
  }

  @media (max-width: 768px) {
    min-width: 120px;
    padding: 6px 10px;
    font-size: 11px;
  }
`;

const LoadingContainer = styled.div`
  position: absolute;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
  display: flex;
  flex-direction: column;
  align-items: center;
  gap: 15px;
  color: white;
  z-index: 100;

  span {
    font-size: 16px;
    opacity: 0.9;
  }
`;

const ErrorMessage = styled.div`
  position: absolute;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
  color: white;
  text-align: center;
  padding: 30px;
  background: rgba(220, 53, 69, 0.9);
  border-radius: 10px;
  max-width: 400px;
  z-index: 100;

  h3 {
    margin-bottom: 15px;
    color: white;
    font-size: 18px;
  }

  p {
    margin-bottom: 20px;
    font-size: 14px;
    opacity: 0.9;
    line-height: 1.5;
  }

  .error-actions {
    display: flex;
    gap: 10px;
    justify-content: center;
    flex-wrap: wrap;
  }

  button {
    background: white;
    color: #dc3545;
    border: none;
    padding: 10px 20px;
    border-radius: 6px;
    cursor: pointer;
    font-weight: 500;
    font-size: 13px;
    transition: all 0.2s ease;

    &:hover {
      background: #f8f9fa;
      transform: translateY(-1px);
    }

    &:active {
      transform: translateY(0);
    }
  }
`;

const ProgressIndicator = styled.div`
  position: absolute;
  bottom: -4px;
  left: 0;
  height: 4px;
  background: ${props => props.theme?.colors?.primary || '#FF6B6B'};
  width: ${props => props.progress || 0}%;
  transition: width 0.3s ease;
  z-index: 50;
`;

const NotificationToast = styled.div`
  position: absolute;
  top: 20px;
  left: 50%;
  transform: translateX(-50%);
  background: rgba(0, 0, 0, 0.9);
  color: white;
  padding: 12px 20px;
  border-radius: 8px;
  font-size: 14px;
  z-index: 300;
  opacity: ${props => props.visible ? 1 : 0};
  transition: all 0.3s ease;
  pointer-events: none;
  
  &.success {
    background: rgba(40, 167, 69, 0.9);
  }
  
  &.error {
    background: rgba(220, 53, 69, 0.9);
  }
`;

const EnhancedEpisodePlayer = ({
  episodeId,
  animeId,
  autoPlay = false,
  autoNext = false,
  onEpisodeChange,
  onProgress: onProgressCallback,
  onPlay,
  onPause,
  onEnded,
  onError: onErrorCallback,
  className,
  style,
}) => {
  const [episode, setEpisode] = useState(null);
  const [allEpisodes, setAllEpisodes] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const [progress, setProgress] = useState(0);
  const [controlsVisible, setControlsVisible] = useState(true);

  // –°–æ—Å—Ç–æ—è–Ω–∏–µ —Å—É–±—Ç–∏—Ç—Ä–æ–≤
  const [subtitlesEnabled, setSubtitlesEnabled] = useState(false);
  const [subtitleTracks, setSubtitleTracks] = useState([]);
  const [showSubtitleSettings, setShowSubtitleSettings] = useState(false);

  // –°–æ—Å—Ç–æ—è–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
  const [notification, setNotification] = useState({ visible: false, message: '', type: 'info' });

  // –ü—Ä–æ–≥—Ä–µ—Å—Å –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
  const [savedProgress, setSavedProgress] = useState(null);

  const playerRef = useRef(null);
  const hideControlsTimeoutRef = useRef(null);
  const notificationTimeoutRef = useRef(null);

  // –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö —ç–ø–∏–∑–æ–¥–∞
  useEffect(() => {
    if (episodeId) {
      loadEpisodeData();
    }
  }, [episodeId]);

  // –ó–∞–≥—Ä—É–∑–∫–∞ –≤—Å–µ—Ö —ç–ø–∏–∑–æ–¥–æ–≤ –∞–Ω–∏–º–µ
  useEffect(() => {
    if (animeId) {
      loadAllEpisodes();
    }
  }, [animeId]);

  // –ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–≥–æ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
  useEffect(() => {
    if (animeId && episodeId) {
      const saved = loadVideoProgress(animeId, episodeId);
      setSavedProgress(saved);

      if (saved) {
        setProgress((saved.currentTime / (saved.duration || 1)) * 100);
      }
    }
  }, [animeId, episodeId]);

  // –°–∫—Ä—ã—Ç–∏–µ –∫–æ–Ω—Ç—Ä–æ–ª–æ–≤
  const hideControlsAfterDelay = useCallback(() => {
    if (hideControlsTimeoutRef.current) {
      clearTimeout(hideControlsTimeoutRef.current);
    }

    hideControlsTimeoutRef.current = setTimeout(() => {
      setControlsVisible(false);
    }, 4000);
  }, []);

  const showControls = useCallback(() => {
    setControlsVisible(true);
    hideControlsAfterDelay();
  }, [hideControlsAfterDelay]);

  // –ü–æ–∫–∞–∑ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
  const showNotification = useCallback((message, type = 'info', duration = 3000) => {
    if (notificationTimeoutRef.current) {
      clearTimeout(notificationTimeoutRef.current);
    }

    setNotification({ visible: true, message, type });

    notificationTimeoutRef.current = setTimeout(() => {
      setNotification({ visible: false, message: '', type: 'info' });
    }, duration);
  }, []);

  const loadEpisodeData = async () => {
    try {
      setLoading(true);
      setError(null);

      console.log(`üé¨ –ó–∞–≥—Ä—É–∑–∫–∞ —ç–ø–∏–∑–æ–¥–∞ ${episodeId}...`);

      const episodeData = await anilibriaV2Service.getEpisodeById(episodeId);
      const convertedEpisode = anilibriaV2Service.convertEpisodeToFormat(episodeData);

      setEpisode(convertedEpisode);

      // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—É–±—Ç–∏—Ç—Ä—ã –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
      await loadSubtitles(episodeData);

      console.log('‚úÖ –≠–ø–∏–∑–æ–¥ –∑–∞–≥—Ä—É–∂–µ–Ω:', convertedEpisode.title);

    } catch (err) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —ç–ø–∏–∑–æ–¥–∞:', err);
      setError(`–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —ç–ø–∏–∑–æ–¥: ${err.message}`);
      showNotification('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —ç–ø–∏–∑–æ–¥–∞', 'error');
    } finally {
      setLoading(false);
    }
  };

  const loadAllEpisodes = async () => {
    try {
      console.log(`üìù –ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø–∏—Å–∫–∞ —ç–ø–∏–∑–æ–¥–æ–≤ –¥–ª—è –∞–Ω–∏–º–µ ${animeId}...`);

      const episodesData = await anilibriaV2Service.getAnimeEpisodes(animeId);

      if (Array.isArray(episodesData)) {
        const convertedEpisodes = episodesData
          .map(ep => anilibriaV2Service.convertEpisodeToFormat(ep))
          .sort((a, b) => (a.number || 0) - (b.number || 0));

        setAllEpisodes(convertedEpisodes);
        console.log(`‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${convertedEpisodes.length} —ç–ø–∏–∑–æ–¥–æ–≤`);
      }

    } catch (err) {
      console.warn('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–ø–∏—Å–æ–∫ —ç–ø–∏–∑–æ–¥–æ–≤:', err);
    }
  };

  const loadSubtitles = async (episodeData) => {
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Å—É–±—Ç–∏—Ç—Ä–æ–≤ –≤ –¥–∞–Ω–Ω—ã—Ö —ç–ø–∏–∑–æ–¥–∞
      const tracks = [];

      // –†—É—Å—Å–∫–∏–µ —Å—É–±—Ç–∏—Ç—Ä—ã
      if (episodeData.subtitles?.ru) {
        tracks.push({
          src: episodeData.subtitles.ru,
          label: '–†—É—Å—Å–∫–∏–µ —Å—É–±—Ç–∏—Ç—Ä—ã',
          language: 'ru',
          default: true,
        });
      }

      // –ê–Ω–≥–ª–∏–π—Å–∫–∏–µ —Å—É–±—Ç–∏—Ç—Ä—ã
      if (episodeData.subtitles?.en) {
        tracks.push({
          src: episodeData.subtitles.en,
          label: 'English subtitles',
          language: 'en',
        });
      }

      // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –¥—Ä—É–≥–∏–µ —è–∑—ã–∫–∏
      if (episodeData.subtitles?.ja) {
        tracks.push({
          src: episodeData.subtitles.ja,
          label: 'Êó•Êú¨Ë™ûÂ≠óÂπï',
          language: 'ja',
        });
      }

      setSubtitleTracks(tracks);

      // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤–∫–ª—é—á–∞–µ–º —Å—É–±—Ç–∏—Ç—Ä—ã –µ—Å–ª–∏ –µ—Å—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞
      const settings = getVideoSettings();
      if (settings.subtitles !== 'off' && tracks.length > 0) {
        setSubtitlesEnabled(true);
      }

    } catch (err) {
      console.warn('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—É–±—Ç–∏—Ç—Ä–æ–≤:', err);
    }
  };

  const handleEpisodeChange = useCallback((newEpisodeId) => {
    if (newEpisodeId !== episodeId) {
      showNotification('–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —ç–ø–∏–∑–æ–¥–∞...', 'info');
      onEpisodeChange?.(newEpisodeId);
    }
  }, [episodeId, onEpisodeChange, showNotification]);

  const handleProgress = useCallback((progressData) => {
    const { currentTime, duration, progress: progressPercent } = progressData;

    setProgress(progressPercent);

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
    if (animeId && episodeId && currentTime > 0 && duration > 0) {
      saveVideoProgress(animeId, episodeId, currentTime, duration, progressPercent);
    }

    onProgressCallback?.({
      ...progressData,
      animeId,
      episodeId,
      episode,
    });
  }, [animeId, episodeId, episode, onProgressCallback]);

  const handleEnded = useCallback(() => {
    if (autoNext && allEpisodes.length > 0) {
      const currentIndex = allEpisodes.findIndex(ep => ep.id === episodeId);
      if (currentIndex >= 0 && currentIndex < allEpisodes.length - 1) {
        const nextEpisode = allEpisodes[currentIndex + 1];
        showNotification(`–ü–µ—Ä–µ—Ö–æ–¥ –∫ —ç–ø–∏–∑–æ–¥—É ${nextEpisode.number}`, 'success');
        setTimeout(() => {
          handleEpisodeChange(nextEpisode.id);
        }, 2000);
        return;
      }
    }

    showNotification('–≠–ø–∏–∑–æ–¥ –∑–∞–≤–µ—Ä—à–µ–Ω', 'success');
    onEnded?.();
  }, [autoNext, allEpisodes, episodeId, handleEpisodeChange, onEnded, showNotification]);

  const handleError = useCallback((errorMessage) => {
    setError(errorMessage);
    showNotification('–û—à–∏–±–∫–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è', 'error');
    onErrorCallback?.(errorMessage);
  }, [onErrorCallback, showNotification]);

  const toggleSubtitles = useCallback(() => {
    const newState = !subtitlesEnabled;
    setSubtitlesEnabled(newState);

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É
    saveVideoSettings({ subtitles: newState ? 'on' : 'off' });

    showNotification(
      `–°—É–±—Ç–∏—Ç—Ä—ã ${newState ? '–≤–∫–ª—é—á–µ–Ω—ã' : '–æ—Ç–∫–ª—é—á–µ–Ω—ã'}`,
      'success',
      2000,
    );
  }, [subtitlesEnabled, showNotification]);

  const toggleSubtitleSettings = useCallback(() => {
    setShowSubtitleSettings(!showSubtitleSettings);
  }, [showSubtitleSettings]);

  // –ì–æ—Ä—è—á–∏–µ –∫–ª–∞–≤–∏—à–∏
  useEffect(() => {
    const handleKeyPress = (e) => {
      switch (e.key.toLowerCase()) {
      case 'c':
        e.preventDefault();
        toggleSubtitles();
        break;
      case 's':
        if (e.ctrlKey || e.metaKey) {
          e.preventDefault();
          toggleSubtitleSettings();
        }
        break;
      case 'n':
        if (e.ctrlKey || e.metaKey) {
          e.preventDefault();
          // –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —ç–ø–∏–∑–æ–¥—É
          const currentIndex = allEpisodes.findIndex(ep => ep.id === episodeId);
          if (currentIndex >= 0 && currentIndex < allEpisodes.length - 1) {
            handleEpisodeChange(allEpisodes[currentIndex + 1].id);
          }
        }
        break;
      case 'p':
        if (e.ctrlKey || e.metaKey) {
          e.preventDefault();
          // –ü–µ—Ä–µ—Ö–æ–¥ –∫ –ø—Ä–µ–¥—ã–¥—É—â–µ–º—É —ç–ø–∏–∑–æ–¥—É
          const currentIndex = allEpisodes.findIndex(ep => ep.id === episodeId);
          if (currentIndex > 0) {
            handleEpisodeChange(allEpisodes[currentIndex - 1].id);
          }
        }
        break;
      }
    };

    document.addEventListener('keydown', handleKeyPress);
    return () => document.removeEventListener('keydown', handleKeyPress);
  }, [subtitlesEnabled, allEpisodes, episodeId, toggleSubtitles, toggleSubtitleSettings, handleEpisodeChange]);

  // Cleanup
  useEffect(() => {
    return () => {
      if (hideControlsTimeoutRef.current) {
        clearTimeout(hideControlsTimeoutRef.current);
      }
      if (notificationTimeoutRef.current) {
        clearTimeout(notificationTimeoutRef.current);
      }
    };
  }, []);

  if (loading) {
    return (
      <PlayerContainer className={className} style={style}>
        <LoadingContainer>
          <LoadingSpinner size="48px" />
          <span>–ó–∞–≥—Ä—É–∑–∫–∞ —ç–ø–∏–∑–æ–¥–∞...</span>
        </LoadingContainer>
      </PlayerContainer>
    );
  }

  if (error) {
    return (
      <PlayerContainer className={className} style={style}>
        <ErrorMessage>
          <h3>–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏</h3>
          <p>{error}</p>
          <div className="error-actions">
            <button onClick={loadEpisodeData}>
              –ü–æ–≤—Ç–æ—Ä–∏—Ç—å –ø–æ–ø—ã—Ç–∫—É
            </button>
            <button onClick={() => window.location.reload()}>
              –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É
            </button>
          </div>
        </ErrorMessage>
      </PlayerContainer>
    );
  }

  return (
    <PlayerContainer
      className={className}
      style={style}
      onMouseMove={showControls}
      onMouseEnter={showControls}
    >
      {/* –û—Å–Ω–æ–≤–Ω–æ–π –ø–ª–µ–µ—Ä */}
      <AniLibertyPlayer
        ref={playerRef}
        animeId={animeId}
        episodeId={episodeId}
        autoPlay={autoPlay}
        onProgress={handleProgress}
        onPlay={onPlay}
        onPause={onPause}
        onEnded={handleEnded}
        onError={handleError}
      />

      {/* –°—É–±—Ç–∏—Ç—Ä—ã */}
      <SubtitleManager
        currentTime={progress}
        subtitleTracks={subtitleTracks}
        enabled={subtitlesEnabled}
        showSettings={showSubtitleSettings}
      />

      {/* –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ */}
      <ProgressIndicator progress={progress} />

      {/* –ö–æ–Ω—Ç—Ä–æ–ª—ã —ç–ø–∏–∑–æ–¥–æ–≤ –∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ */}
      <OverlayControls visible={controlsVisible}>
        {/* –°–µ–ª–µ–∫—Ç–æ—Ä —ç–ø–∏–∑–æ–¥–æ–≤ */}
        {allEpisodes.length > 0 && (
          <EpisodeSelector
            value={episodeId || ''}
            onChange={(e) => handleEpisodeChange(e.target.value)}
          >
            {allEpisodes.map((ep) => (
              <option key={ep.id} value={ep.id}>
                –≠–ø. {ep.number}: {ep.title}
              </option>
            ))}
          </EpisodeSelector>
        )}

        {/* –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—É–±—Ç–∏—Ç—Ä–∞–º–∏ */}
        {subtitleTracks.length > 0 && (
          <>
            <ControlButton
              className={subtitlesEnabled ? 'active' : ''}
              onClick={toggleSubtitles}
              title="–ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å —Å—É–±—Ç–∏—Ç—Ä—ã (C)"
            >
              SUB
            </ControlButton>

            <ControlButton
              className={showSubtitleSettings ? 'active' : ''}
              onClick={toggleSubtitleSettings}
              title="–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å—É–±—Ç–∏—Ç—Ä–æ–≤ (Ctrl+S)"
            >
              ‚öô
            </ControlButton>
          </>
        )}
      </OverlayControls>

      {/* –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è */}
      <NotificationToast
        visible={notification.visible}
        className={notification.type}
      >
        {notification.message}
      </NotificationToast>
    </PlayerContainer>
  );
};

export default EnhancedEpisodePlayer;
