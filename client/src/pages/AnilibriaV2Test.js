import React, { useState, useEffect } from 'react';
import styled from 'styled-components';
import anilibriaV2Service from '../services/anilibriaV2Service';
import { VideoPlayer } from '../components/video';

const TestContainer = styled.div`
  min-height: 100vh;
  padding: 80px 20px 40px;
  background: ${props => props.theme.colors.background || '#1a1a1a'};
  color: ${props => props.theme.colors.text || '#ffffff'};
`;

const TestTitle = styled.h1`
  text-align: center;
  margin-bottom: 30px;
  font-size: 2rem;
`;

const TestSection = styled.div`
  max-width: 1200px;
  margin: 0 auto 40px;
  padding: 20px;
  background: ${props => props.theme.colors.surface || '#2a2a2a'};
  border-radius: 12px;
  
  h3 {
    margin-bottom: 15px;
    color: ${props => props.theme.colors.primary || '#FF6B6B'};
  }
`;

const Button = styled.button`
  background: ${props => props.theme.colors.primary || '#FF6B6B'};
  color: white;
  border: none;
  padding: 10px 20px;
  border-radius: 6px;
  cursor: pointer;
  margin: 0 10px 10px 0;
  transition: all 0.2s ease;

  &:hover {
    opacity: 0.9;
    transform: translateY(-1px);
  }

  &:disabled {
    opacity: 0.5;
    cursor: not-allowed;
    transform: none;
  }
`;

const DataDisplay = styled.pre`
  background: #000;
  color: #0f0;
  padding: 15px;
  border-radius: 8px;
  overflow-x: auto;
  max-height: 400px;
  overflow-y: auto;
  font-family: 'Courier New', monospace;
  font-size: 12px;
  white-space: pre-wrap;
`;

const ErrorDisplay = styled.div`
  background: #ff4444;
  color: white;
  padding: 15px;
  border-radius: 8px;
  margin: 10px 0;
`;

const VideoContainer = styled.div`
  width: 100%;
  max-width: 800px;
  margin: 20px auto;
  aspect-ratio: 16/9;
  background: #000;
  border-radius: 12px;
  overflow: hidden;
`;

const AnilibriaV2Test = () => {
  const [loading, setLoading] = useState(false);
  const [data, setData] = useState(null);
  const [error, setError] = useState(null);
  const [currentTest, setCurrentTest] = useState('');
  const [videoData, setVideoData] = useState(null);

  const runTest = async (testName, testFunction) => {
    setLoading(true);
    setError(null);
    setCurrentTest(testName);
    setData(null);

    try {
      console.log(`üß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞: ${testName}`);
      const result = await testFunction();
      setData(result);
      console.log(`‚úÖ –¢–µ—Å—Ç '${testName}' —É—Å–ø–µ—à–µ–Ω:`, result);
    } catch (err) {
      setError(err.message);
      console.error(`‚ùå –¢–µ—Å—Ç '${testName}' –Ω–µ—É–¥–∞—á–µ–Ω:`, err);
    } finally {
      setLoading(false);
    }
  };

  const tests = {
    '–ü–æ–ª—É—á–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Ä–µ–ª–∏–∑—ã': () => anilibriaV2Service.getLatestReleases(5),

    '–ü–æ–ª—É—á–∏—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —Ä–µ–ª–∏–∑': () => anilibriaV2Service.getRelease(9990),

    '–ü–æ–ª—É—á–∏—Ç—å —Ä–µ–ª–∏–∑ —Å —ç–ø–∏–∑–æ–¥–∞–º–∏': () => anilibriaV2Service.getReleaseWithEpisodes(9990),

    '–ü–æ–∏—Å–∫ —Ä–µ–ª–∏–∑–æ–≤': () => anilibriaV2Service.searchReleases('–º–µ—á–∞', 1, 5),

    '–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ —Ä–µ–ª–∏–∑—ã': () => anilibriaV2Service.getRecommendedReleases(5),

    '–°–ª—É—á–∞–π–Ω—ã–µ —Ä–µ–ª–∏–∑—ã': () => anilibriaV2Service.getRandomReleases(3),

    '–¢–µ—Å—Ç —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ - getAnimeById': () => anilibriaV2Service.getAnimeById(9990),

    '–¢–µ—Å—Ç —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ - getEpisodeById': () => anilibriaV2Service.getEpisodeById(9990, 1),

    '–¢–µ—Å—Ç –≤–∏–¥–µ–æ - getAnimeVideo': async () => {
      const result = await anilibriaV2Service.getAnimeVideo(9990, 1);
      setVideoData(result);
      return result;
    },
  };

  const testVideoPlayer = () => {
    if (!videoData || !videoData.url) {
      setError('–°–Ω–∞—á–∞–ª–∞ –∑–∞–ø—É—Å—Ç–∏—Ç–µ —Ç–µ—Å—Ç "–¢–µ—Å—Ç –≤–∏–¥–µ–æ - getAnimeVideo"');
      return;
    }

    setCurrentTest('–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ VideoPlayer');
  };

  useEffect(() => {
    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–≤—ã–π —Ç–µ—Å—Ç –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
    runTest('–ü–æ–ª—É—á–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Ä–µ–ª–∏–∑—ã', tests['–ü–æ–ª—É—á–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Ä–µ–ª–∏–∑—ã']);
  }, []);

  return (
    <TestContainer>
      <TestTitle>üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ AniLiberty API v2</TestTitle>

      <TestSection>
        <h3>üì° API –¢–µ—Å—Ç—ã</h3>
        <div>
          {Object.entries(tests).map(([testName, testFunc]) => (
            <Button
              key={testName}
              onClick={() => runTest(testName, testFunc)}
              disabled={loading}
            >
              {testName}
            </Button>
          ))}
          <Button
            onClick={testVideoPlayer}
            disabled={!videoData?.url}
          >
            üé¨ –¢–µ—Å—Ç VideoPlayer
          </Button>
        </div>
      </TestSection>

      {loading && (
        <TestSection>
          <h3>‚è≥ –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è: {currentTest}</h3>
          <p>–ó–∞–≥—Ä—É–∑–∫–∞...</p>
        </TestSection>
      )}

      {error && (
        <TestSection>
          <h3>‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ: {currentTest}</h3>
          <ErrorDisplay>{error}</ErrorDisplay>
        </TestSection>
      )}

      {data && (
        <TestSection>
          <h3>‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç–∞: {currentTest}</h3>
          <DataDisplay>{JSON.stringify(data, null, 2)}</DataDisplay>
        </TestSection>
      )}

      {videoData && videoData.url && currentTest === '–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ VideoPlayer' && (
        <TestSection>
          <h3>üé¨ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ VideoPlayer —Å AniLiberty</h3>
          <VideoContainer>
            <VideoPlayer
              src={videoData.url}
              title={videoData.episode?.title || '–¢–µ—Å—Ç–æ–≤–æ–µ –≤–∏–¥–µ–æ'}
              poster={videoData.episode?.preview}
              qualities={videoData.qualities || []}
              autoPlay={false}
              muted={true}
              preferredPlayer="hls"
              enablePlayerSelector={true}
              onTimeUpdate={(time) => console.log('Time update:', time)}
              onError={(error) => console.error('Player error:', error)}
              onQualityChange={(quality) => console.log('Quality changed:', quality)}
            />
          </VideoContainer>
          <p><strong>URL:</strong> {videoData.url}</p>
          <p><strong>–¢–∏–ø:</strong> {videoData.type}</p>
          <p><strong>–ö–∞—á–µ—Å—Ç–≤–∞:</strong> {videoData.qualities?.length || 0}</p>
        </TestSection>
      )}

      <TestSection>
        <h3>üìã –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–µ—Å—Ç–∞—Ö</h3>
        <ul>
          <li><strong>–ü–æ–ª—É—á–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Ä–µ–ª–∏–∑—ã</strong> - –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –±–∞–∑–æ–≤—É—é —Ä–∞–±–æ—Ç—É API</li>
          <li><strong>–ü–æ–ª—É—á–∏—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —Ä–µ–ª–∏–∑</strong> - —Ç–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∞–Ω–∏–º–µ</li>
          <li><strong>–ü–æ–ª—É—á–∏—Ç—å —Ä–µ–ª–∏–∑ —Å —ç–ø–∏–∑–æ–¥–∞–º–∏</strong> - –≤–∫–ª—é—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —ç–ø–∏–∑–æ–¥–æ–≤</li>
          <li><strong>–ü–æ–∏—Å–∫ —Ä–µ–ª–∏–∑–æ–≤</strong> - —Ç–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–æ–∏—Å–∫–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏—é</li>
          <li><strong>–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ —Ä–µ–ª–∏–∑—ã</strong> - –ø–æ–ª—É—á–∞–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏</li>
          <li><strong>–°–ª—É—á–∞–π–Ω—ã–µ —Ä–µ–ª–∏–∑—ã</strong> - –ø–æ–ª—É—á–∞–µ—Ç —Å–ª—É—á–∞–π–Ω—ã–µ –∞–Ω–∏–º–µ</li>
          <li><strong>–¢–µ—Å—Ç —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏</strong> - –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–∞–±–æ—Ç—É —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º –∫–æ–¥–æ–º</li>
          <li><strong>–¢–µ—Å—Ç –≤–∏–¥–µ–æ</strong> - –ø–æ–ª—É—á–∞–µ—Ç –≤–∏–¥–µ–æ URL –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏</li>
          <li><strong>–¢–µ—Å—Ç VideoPlayer</strong> - –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–∞–±–æ—Ç—É –ø–ª–µ–µ—Ä–∞ —Å HLS</li>
        </ul>
      </TestSection>

      <TestSection>
        <h3>üîß –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏—Å—Ç–µ–º–µ</h3>
        <p><strong>API Endpoint:</strong> https://aniliberty.top/api/v1</p>
        <p><strong>–ë—Ä–∞—É–∑–µ—Ä –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç HLS:</strong> {window.MediaSource ? '‚úÖ –î–∞' : '‚ùå –ù–µ—Ç'}</p>
        <p><strong>User Agent:</strong> {navigator.userAgent}</p>
      </TestSection>
    </TestContainer>
  );
};

export default AnilibriaV2Test;
